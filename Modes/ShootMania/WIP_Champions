/**
 *  Mode Champions - GEstrategic
 */

#Extends "Modes/ShootMania/ModeTournament.Script.txt"

#Include "Libs/Nadeo/ShootMania/SM.Script.txt" as SM
#Include "Libs/Nadeo/ShootMania/Debug.Script.txt" as Debug
#Include "Libs/Nadeo/Interface.Script.txt" as Interface
#Include "Libs/Nadeo/Layers2.Script.txt" as Layers

#Include "MathLib" as MathLib
#Include "TextLib" as TextLib

#Setting S_Mode 1 as _("$0f01$fff: GEstrategic $4f42$999: Champions")

#Const  CompatibleMapTypes  "gesArena, HeroesArena, EliteArena"
#Const  Version       "2015-09-27"
#Const  ScriptName      "Champions.Script.txt"

#Const C_Debug True

***StartServer***
***
ST2::SetStyle("LibST_SMBaseTeams");
ST2::SetStyle("LibST_SMWithLegends");
ST2::CreateCol("DefPoints", _("|Substantive|Hit"), "0", 3., 100.);
ST2::SetColTextAlign("DefPoints", CMlControl::AlignHorizontal::Right);
ST2::CreateCol("AtkPoints", _("|Attack,Substantive|Atk"), "0", 3., 110.);
ST2::SetColTextAlign("AtkPoints", CMlControl::AlignHorizontal::Right);
ST2::SetColTextSize("AtkPoints", 3.);
ST2::Build("SM");

Layers::Create("CH_Info");
Layers::Update("CH_Info", CH_Info());

if (C_Debug) Debug::Load();

CreateSpawnScreen("$f60»$z$sThere are 4 attackers, 2 Champions are nammed and they need to capture the poles TOGETHER. The others attacker can't capture.\n$f60»$z$sWhen you attack, you need to capture / kill all defenders. \n$f60»$z$sWhen you defend, you'll need to prevent the capture OR kill a Champion ! You'll respawn after 10 seconds.\n$f60»$z$sThe 2 champions got a markers and got 3 lifes. One have an Rail and the other 4 rockets. \n$f60»$z$sThe 2 others attackers have only one life and a Rail.\n$f60»$z$sOne of all defenders got an nucleus, if he shoot an ally, they'll got an shield.");
***

***Players_ClearScores***
***
declare Atk_Points for Player = ["Attack" => 0];
declare Def_Points for Player = ["DefPoints" => 0];
Atk_Points["Attack"] = 0;
Def_Points["DefPoints"] = 0;
***

***StartMap***
***
ClearScores();
Users_SetNbFakeUsers(0, 1);
ST2::ClearScores();

foreach (Player in Players) {
---Players_ClearScores---
}
***

***InitVarMap***
***
if (G_Gameplay != C_GEs) G_ModeName = "Champions";
else G_ModeName = "GEstrategic";

declare netwrite Text NameToWrite for Teams[0];
NameToWrite = G_ModeName;

Goals = CSmMapLandmark[];
declare EliminatedDef = 0;
declare SoundVariantDef = 0;
declare EliminatedAtk = 0;
declare SoundVariantAtk = 0;
declare PoleTime = 0;
declare GoalCanBeCaptured = False;
declare G_UIUpdate = Now + 100;
G_ReasonMessage1 = "";
G_ReasonMessage2 = "";
G_Reason = -1;
G_TiePoints = -1;
***

***InitVarTurn***
***
G_DefClan = 3-G_AtkClan;
GoalCanBeCaptured = False;
foreach (Goal in Goals) Goal.Gauge.Clan = 3-G_AtkClan;

SoundVariantDef = 0;
SoundVariantAtk = 0;
EliminatedDef = -1;
EliminatedAtk = -1;

	UIManager.UIAll.TeamLabelsVisibility = CUIConfig::ELabelsVisibility::Always;
	UIManager.UIAll.TeamLabelsShowGauges = CUIConfig::EVisibility::ForcedHidden;
	UIManager.UIAll.TeamLabelsShowNames = CUIConfig::EVisibility::ForcedHidden;
	UIManager.UIAll.OpposingTeamLabelsVisibility = CUIConfig::ELabelsVisibility::Never;
	
	if (G_Gameplay != C_GEs) G_ModeName = "Champions";
	else G_ModeName = "GEstrategic";
	
	declare netwrite Text NameToWrite for Teams[0];
	NameToWrite = G_ModeName;
***

***StartTurn***
***
Interface::CreatePlayersLists("Small", 1., 10, 1);
UpdateMarkers();
***

***StartMap***
***
UpdateMarkers();
***

***OnRequestRespawn***
***
PassOn(Event);
***

***SpawnDef***
***
if (DefSpawned >= MaxDef) break;
if (!Players.existskey(PlayerId)) continue;

declare Player <=> Players[PlayerId];
declare CurrentWeapon for Player = 1;
CurrentWeapon = 1;
SetPlayerAmmoMax(Player, CSmMode::EWeapon::Rocket, C_DefRocketAmmoMax);
SetPlayerAmmoMax(Player, CSmMode::EWeapon::Laser, C_DefLaserAmmoMax);
SetPlayerAmmoMax(Player, CSmMode::EWeapon::Nucleus, C_DefNucleusAmmoMax);

Player.AmmoGain		= 1. * C_DefRocketAmmoGain;
Player.StaminaMax	= 1. * C_DefStaminaMaxMultiplier;
Player.StaminaGain	= 1. * C_DefStaminaMaxMultiplier;
Player.ArmorMax		= 100;
SetPlayerWeapon(Player, CSmMode::EWeapon::Rocket, True); 
SM::SpawnPlayer(Player, G_DefClan, DefSpawn, Now);
Player.IsHighlighted = True;
DefSpawned += 1;
***

***SpawnAtk***
***
if (!Players.existskey(PlayerId)) continue;		
declare Player <=> Players[PlayerId];
declare CurrentWeapon for Player = 1;
SetPlayerAmmoMax(Player, CSmMode::EWeapon::Rocket, C_AtkRocketAmmoMax-2);
SetPlayerAmmoMax(Player, CSmMode::EWeapon::Laser, C_AtkLaserAmmoMax);
SetPlayerAmmoMax(Player, CSmMode::EWeapon::Nucleus, C_AtkNucleusAmmoMax);

Player.StaminaMax	= 0.8;
Player.StaminaGain	= 1.;
Player.ArmorMax		= 100;
if (Player.Id == G_Attackers[2] && G_Gameplay == C_Champions) {
	CurrentWeapon = 3;
	//if (DefSpawned <= 1) Player.ArmorMax = 100;
	/*else*/ Player.ArmorMax = (DefSpawned * 100)/* - 100*/;
	Player.AmmoGain		= 1.;
	SetPlayerWeapon(Player, CSmMode::EWeapon::Laser, False);
}
else if (Player.Id == G_Attackers[1]) {
	CurrentWeapon = 3;
	//if (DefSpawned <= 1) Player.ArmorMax = 100;
	/*else*/ Player.ArmorMax = (DefSpawned * 100)/* - 100*/;
	Player.AmmoGain		= 1. * C_AtkRocketAmmoGain;
	SetPlayerWeapon(Player, CSmMode::EWeapon::Rocket, False);
} else {
	CurrentWeapon = 2;
	Player.AmmoGain		= 1. * C_AtkLaserAmmoGain;
	SetPlayerWeapon(Player, CSmMode::EWeapon::Laser, False);
 }
SM::SpawnPlayer(Player, G_AtkClan, AtkSpawn, Now);
Player.IsHighlighted = True;
AtkSpawned += 1;
***

***Event_OnCapture***
***
UIManager.UIAll.BigMessage = "";

PlaySound(CUIConfig::EUISound::VictoryPoint, 0);
Message::SendBigMessage(TextLib::Compose("$<%1$> captured the goal!",
                        Players[G_Attackers[1]].Name), 3000, 10);

if (GetMode() >= 0) {

foreach (PlayerId in Event.Landmark.Sector.PlayersIds) {
declare Player <=> Players[PlayerId];
	Points(Player, "Attack");
}
    MT_Sleep(500);
	MT_StopTurn(C_GoalCaptured);
}
***

***Event_OnHit***
***
Points(Event.Shooter, "Defend");
if (Event.Victim.CurrentClan == G_DefClan) { //< Eliminate a standart defenser
	Event.Damage = 100;
	SoundVariantDef += 1;
	EliminatedDef += 1;

	
	declare Distance = MathLib::Distance(Event.Shooter.Position, Event.Victim.Position);
	Distance = MathLib::NearestInteger(Distance*10.0)/10.0;
	declare DistanceText = TextLib::SubString(TextLib::ToText(Distance), 0, 5);
	declare DistanceSplit = TextLib::Split(".", DistanceText);
	
	if (Event.Shooter.CurWeapon == C_WeaponLaser) NoticeHitDistance(Event.Shooter,
	   TextLib::Compose(_("%1m !"), DistanceText));
// Elim last defenders
	if (ClansNbPlayersAlive[G_DefClan] <= 1 || EliminatedDef-1 >= ClansNbPlayersAlive[G_DefClan]) {
		PlaySound(CUIConfig::EUISound::VictoryPoint, 0);
	} 
	// Elim standard defenders
	else {
		PlaySound(CUIConfig::EUISound::TieBreakPoint, SoundVariantDef);
	}
			
	if (ClansNbPlayersAlive[G_DefClan] > 1) {
		declare DefLeft = ClansNbPlayersAlive[G_DefClan] - 1;
		if (DefLeft <= 1) {
			Message::SendStatusMessage(
				TextLib::Compose(
					"%1%2", 
					Teams[G_DefClan - 1].ColorText,
					_("1 defender left.")
				), 3000, 2
			);
		} else {
			Message::SendStatusMessage(
				TextLib::Compose(
					_("%1 %2 defenders left."), 
					Teams[G_DefClan - 1].ColorText, 
					TextLib::ToText(DefLeft)
				), 3000, 2
			);
		}
	}
} else { //< Eliminate a standart defenser
	Event.Damage = 100;
	SoundVariantAtk += 1;
	if (Event.Victim.Id != G_Attackers[1]) EliminatedAtk += 1;
	
	if (Event.Shooter.CurWeapon == C_WeaponLaser) NoticeHitDistance(Event.Shooter,
	   TextLib::Compose(_("%1m hit!")));
// Elim last attackers/ultimate
    if (Event.Victim.Armor <= 100) {
	if (ClansNbPlayersAlive[G_AtkClan] <= 1 || EliminatedAtk-1 >= ClansNbPlayersAlive[G_AtkClan] || Event.Victim.Id ==
	G_Attackers[1]) {
		PlaySound(CUIConfig::EUISound::VictoryPoint, 0);
	} 
	// Elim standard defenders
	else {
		PlaySound(CUIConfig::EUISound::TiePoint, SoundVariantAtk);
	}
			
	if (ClansNbPlayersAlive[G_AtkClan] > 1) {
		declare AtkLeft = ClansNbPlayersAlive[G_AtkClan] - 1;
		if (AtkLeft <= 1) {
			Message::SendStatusMessage(
				TextLib::Compose(
					"%1%2", 
					Teams[G_AtkClan - 1].ColorText,
					_("1 attacker left.")
				), 3000, 2
			);
		} else {
			Message::SendStatusMessage(
				TextLib::Compose(
					_("%1 %2 attackers left."), 
					Teams[G_AtkClan - 1].ColorText, 
					TextLib::ToText(AtkLeft)
				), 3000, 2
			);
		} }
	}
}
PassOn(Event);
***

***StartEndTurn***
***
GoalAdv();

Victory::SetRoundWinnerIfNoWinner (G_WinningTurn);
***

***CompleteEndTurn***
***
Interface::DestroyPlayersLists();
***

***DeleteVarMap***
***
EliminatedDef = 0;
SoundVariantDef = 0;
EliminatedAtk = 0;
SoundVariantAtk = 0;
PoleTime = 0;
GoalCanBeCaptured = False;
G_UIUpdate = Now + 100;
G_ReasonMessage1 = "";
G_ReasonMessage2 = "";
MT_QuickStop = False;

Goals.clear();
***

***TournamentLoop***
***
//ManageCommand();
Layers::Attach("CH_Info");
Message::Loop();

if (C_Debug) Debug::Loop();

if (G_UIUpdate < Now) {
    G_UIUpdate = Now + 250; 
	Layers::Update("CH_Info", CH_Info());
}

if (Now >= PoleTime + StartTime) {

foreach (Landmark in Goals) {
	if (!GoalCanBeCaptured && !G_Override_NeedWarmUp) {
		GoalCanBeCaptured = True;
		UIManager.UIAll.BigMessageSound = CUIConfig::EUISound::PhaseChange;
		UIManager.UIAll.BigMessageSoundVariant = 0;
		UIManager.UIAll.BigMessage = _("The goal can now be captured.");
		UIManager.UIAll.CountdownEndTime = -1;
	}
	Landmark.Gauge.Clan = G_AtkClan;
	Landmark.Gauge.Max = MathLib::NearestInteger(S_TimeCapture * 1000) * MapLandmarks_Gauge.count;
	declare Capture = 0;
	declare CaptureUlt = 0;
	foreach (PlayerId in Landmark.Sector.PlayersIds) {
		declare Player <=> Players[PlayerId];
		if (Player.CurrentClan == G_AtkClan && Player.Id != G_Attackers[1]) Capture += 1;
		
		declare UI for Player = UIManager.GetUI(Player);
		for (Count, 1, 2) {
		if (Capture > 0 && Landmark.Sector.PlayersIds.exists(G_Attackers[Count])) UI.GaugeMessage = "" ^ MathLib::FloorInteger(Landmark.Gauge.ValueReal*100) ^ "%";
		else if (Player.Id == G_Attackers[Count] && Capture == 0) UI.GaugeMessage = "" ^ MathLib::FloorInteger(Landmark.Gauge.ValueReal*100) ^ "% | Waiting for an attacker.";
		else if (Player.Id != G_Attackers[Count] && Player.CurrentClan == G_AtkClan)
        UI.GaugeMessage = "" ^ MathLib::FloorInteger(Landmark.Gauge.ValueReal*100) ^ "% | Waiting for the Champion.";
        }
	}
	if (G_Gameplay == C_GEs && Landmark.Sector.PlayersIds.exists(G_Attackers[1]) && AtkSpawned > 1) {
	Landmark.Gauge.Speed = Capture;
	} else if (G_Gameplay == C_Champions && Landmark.Sector.PlayersIds.exists(G_Attackers[1])
	&& Landmark.Sector.PlayersIds.exists(G_Attackers[2])) {
	Landmark.Gauge.Speed = 1+Capture;
	}
	else if (!Landmark.Sector.PlayersIds.exists(G_Attackers[1])) Landmark.Gauge.Speed = 0;
	else if (Landmark.Sector.PlayersIds.exists(G_Attackers[1]) && AtkSpawned == 1) Landmark.Gauge.Speed = 1;
    }
}

foreach(Player in Players)
BlockPoleInfo(Player);

if (ClansNbPlayersAlive[G_DefClan] <= 0) MT_StopTurn(C_DefElimination);
if (ClansNbPlayersAlive[G_AtkClan] <= 1 && AtkSpawned > 1) MT_StopTurn(C_AtkElimination);
if (AtkEliminated()) MT_StopTurn(C_UltimateElimination);
***

***StartWarmUp***
***
Interface::CreatePlayersLists("Medium", 0.67, 10, 1);

WarmUp2::SetAllSlotsIcons("Clan1", "file://Media/Manialinks/ShootMania/Common/Laser.dds");
WarmUp2::SetAllSlotsIcons("Clan2", "file://Media/Manialinks/ShootMania/Common/Laser.dds");

log(G_Gameplay);

if (G_Gameplay == C_GEs) {
for (Count, 1, 2)
WarmUp2::SetSlotIcon("Clan"^Count, G_AtkSlot[1][1], "file://Media/Manialinks/ShootMania/Common/Rocket.dds");
} else {
for (Count, 1, 2) {
WarmUp2::SetSlotIcon("Clan"^Count, G_AtkSlot[1][Count], "file://Media/Manialinks/ShootMania/Common/WpRocket.dds");
WarmUp2::SetSlotIcon("Clan"^Count, G_AtkSlot[2][Count], "file://Media/Manialinks/ShootMania/Common/WpLaser.dds");
}
}
***

Void Points(CSmPlayer _Helped, Text _Input) {
    if (_Input == "Attack") {
	declare Atk_Points for _Helped = ["Attack" => 0];
	Atk_Points["Attack"] += 1;
	ST2::SetColValue("AtkPoints", _Helped.Score, TextLib::ToText(Atk_Points["Attack"]));
	} else {
	declare Def_Points for _Helped = ["DefPoints" => 0];
	Def_Points["DefPoints"] += 1;
	ST2::SetColValue("DefPoints", _Helped.Score, TextLib::ToText(Def_Points["DefPoints"]));	
	}
}

Text CH_Info() {
return "";
}

Void BlockPoleInfo(CSmPlayer Player) {
declare UI for Player = UIManager.GetUI(Player);
	if (Player.BlockPole != Null && UI != Null) {
		declare BlockPole <=> Player.BlockPole;
		UI.GaugeRatio = BlockPole.Gauge.ValueReal;
		UI.GaugeClan = G_AtkClan;
	} else { UI.GaugeRatio = -1000.;
	UI.GaugeClan = -1;
	UI.GaugeMessage = ""; }
}

Void UpdateMarkers() {
	// Set the marker above the goal
	UIManager.UIAll.MarkersXML = "";
	
	declare AtkPlayerLogin = [1 => "", 2 => ""];
	if (Players.existskey(G_Attackers[1])) AtkPlayerLogin[1] = Players[G_Attackers[1]].Login;
	if (Players.existskey(G_Attackers[2])) AtkPlayerLogin[2] = Players[G_Attackers[2]].Login;
	
	declare NucleusMarker = "";
	if (AtkPlayerLogin[1] != "" || AtkPlayerLogin[2] != "") {
		NucleusMarker = """<marker icon="Player3" color="{{{TextLib::ColorToText(Teams[G_AtkClan-1].ColorPrimary)}}}" playerlogin="{{{AtkPlayerLogin[1]}}}" box="0 2 0" />""";
		NucleusMarker ^= """<marker icon="Player3" color="{{{TextLib::ColorToText(Teams[G_AtkClan-1].ColorPrimary)}}}" playerlogin="{{{AtkPlayerLogin[2]}}}" box="0 2 0" />""";
	}
	
	declare PolesMarker = "";
	foreach (LandmarkGauge in MapLandmarks_Gauge) {
		declare Icon = "";
		declare Name = "";
		if (LandmarkGauge.Tag == "Goal A") { Icon = "PointA"; Name = "$w$s$oA"; }
		else if (LandmarkGauge.Tag == "Goal B") { Icon = "PointB"; Name = "$w$s$oB"; }
		else if (LandmarkGauge.Tag == "Goal C") { Icon = "PointC"; Name = "$w$s$oC"; }
		else continue;
		PolesMarker ^= """<marker icon="{{{Icon}}}" color="{{{TextLib::ColorToText(Teams[2-G_AtkClan].ColorPrimary)}}}" pos="{{{LandmarkGauge.Position.X}}} {{{LandmarkGauge.Position.Y + 25}}} {{{LandmarkGauge.Position.Z}}}" />""";
	}
		
	foreach (Player in Players) {
		declare UI <=> UIManager.GetUI(Player);
		if (UI == Null) continue;
		
		if (Player.CurrentClan == G_AtkClan && Player.Login != AtkPlayerLogin[GetAtkFunction(Player)]) {
			UI.MarkersXML = NucleusMarker ^ PolesMarker;
		} else {
			UI.MarkersXML = PolesMarker;
		}
	}
	foreach (Spectator in Spectators) {
		declare UI <=> UIManager.GetUI(Spectator);
		if (UI == Null) continue;
		UI.MarkersXML = PolesMarker ^ NucleusMarker;
	}
}
