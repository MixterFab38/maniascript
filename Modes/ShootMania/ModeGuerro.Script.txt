#Extends "Modes/ShootMania/MM.Script.txt"

#Include "Libs/Nadeo/Victory.Script.txt" as Victory

#Const PauseText "$f70PAUSE"
#Const	ModeVersion				"2015-09-20"
#Const	ModeScriptName			"ModeGuerro.Script.txt"
#Const C_Central 0
#Const C_Elim 1

#Command Command_ForcePauseTime (Integer) as _("Pause Time")

#Command Command_Hello (Text) as
"\n$s$o$i$29f| Creator : $fffGuerro\n$29f| Version : $fff09/20/2015\n$z$s$i$79f$o| $oPlease,\n$o| $oif you found some bugs or you got some suggestions,\n$o| $osend me a PM on Maniaplanet-Forums ( login : Guerro323 ) or in-game ( guerro ),\n$o| $othanks!"





// GLOBALS DECLARE /*    ----------------     */
declare Boolean CE;
declare CSmMapLandmark[] Goals;
declare Integer GoalPoints1;
declare Integer GoalPoints2;
declare Boolean CanEnd;
declare Boolean KoEnd;
declare Boolean KoEndForced;
declare Integer KOPoints;
declare Boolean Request_B;
declare Void NullVoid; // <-- Null action.
declare Boolean RequestGoal; //
declare Integer AdvantageClan; // For advantage things
declare Integer AdvantagePoints; // For advantage things
declare Boolean CentralCanBeCaptured; // When time is up
declare Boolean KOFinished; // When KO is finished
declare Integer KOClan; // KO clan (first clan who touch the central pole )
declare Integer CanCapA; // ^
declare Integer CanCapB; // ^ Time to recapture
declare Boolean CanCapC; // If pole C can be captured.
declare Text IconA; //
declare Text IconB; // Icon
declare Text IconC; //
declare Real AReal; //
declare Real BReal; // -> For Header.
declare Integer KoTime;
declare Integer KOMode; // Ko mode, can be C_Central ( when you need to touch the pole to win ) and can be C_Elim, where you need to egal the score.
declare Integer KOMode_Clan; // Team who started the C_Elim
declare Boolean KOMode_Forced;
/* */ // PAUSE DECLARE START // /*    ----------------     */
/* PAUSE THINGS */ declare Integer CalledPause;
/* PAUSE THINGS */ declare Integer BeforePause;
/* PAUSE THINGS */ declare Boolean Pause;
/* PAUSE THINGS */ declare Integer ResetPause;
/* PAUSE THINGS */ declare Integer Start;
/* PAUSE THINGS */ declare Boolean Fini;
/* PAUSE THINGS */ declare Boolean DontRedo;
declare Text D_DescSpawn_O_EN;
declare Text D_DescSpawn_O_FR;
declare Integer ClanMatchPoints1;
declare Integer ClanMatchPoints2;
/* */ // PAUSE DECLARE END  // /*    ----------------     */

/* ----- */

/* */ // USEROUNDS DECLARE START // /*    ------     */
/* USEROUNDS THINGS */ declare CSmPlayer[Ident] PlayersClan1;
/* USEROUNDS THINGS */ declare CSmPlayer[Ident] PlayersClan2;
/* """""""""""""""" */ declare Boolean UseRounds_B;
/* */ // USEROUNDS SLOTS DECLARE END  // /*    -------     */

/* ----- */

// END.......... /*    ----------------     */
***InitServer***
***
log("========--------------------========");
log("==----------W e l c o me ---------==");
log("Loaded 'ExtendFile' >"^ModeVersion^" . "^ModeScriptName);
log("Loaded 'Gamemode' >"^Version^" . "^ScriptName);
log("==---------S e t t i n g s -------==");
log("Loaded > S_LoosePoints = "^S_LoosePoints);
log("==--------------------------------==");
log("========--------------------========");  
***

***StartServer***
***
CanCapA = 0;
CanCapB = 0;
Request_B = False;
GoalPoints1 = 0;
GoalPoints2 = 0;
UseRounds(True);UseRounds_B = True;
/* lol */ log(""^Now^"""> Script start""");
/* PAUSE THINGS */ Fini = False;
/* PAUSE THINGS */ DontRedo = False;
if (UseRounds_B) { MB_UseSectionRound		= True;  }
***

***StartMap***
***
/* PAUSE THINGS */ declare LastEnd = EndTime;
Goals = CSmMapLandmark[];
Request_B = False;
***



***InitStartServerRound***
***
log(Now^"> Rounds mode actived");
***

***StartRound***
***
KOMode_Forced = False;
declare CanCapC = False;
Victory::RoundBegin();
CanEnd = False;
Request_B = False;
KOMode = 0;
KOClan = 0;
***


***Pause***
***
log(Now^"> A pause was asked. : "^CalledPause / 1000);
Message::SendBigMessage(""^PauseText, CalledPause + 100, 1, CUIConfig::EUISound::PhaseChange, 1);
sleep(1000);
declare TimePause = CalledPause + Now;
declare OldTime = EndTime - TimePause + (Now + CalledPause) + CalledPause;
if (This is CTmMode) {
// TODO
}
if (This is CSmMode) {
foreach(Player in AllPlayers) {
		
		SM::UnspawnAllPlayers();
		Player.ForceColor = <0., 0., 0.>;
		while(!Fini) {
		yield;
		---PauseLoop---
		EndTime = TimePause;		
		if (Now + 50 > TimePause) {
		Fini = True;
		EndTime = OldTime;
		UIManager.UIAll.BigMessage = ("");
		ResetPause = Now + 1000;
		}
		}
	}
}

Start = Now * Now * Now * Now * 100;
DontRedo = False;
***

***PauseManagement***
***
if (Pause) {

if (Now + 50000 >= Start + BeforePause ) {
UIManager.UIAll.StatusMessage = ("$f70PAUSE$fff in 50 seconds");

}

if (Now + 30000 >= Start + BeforePause ) {
UIManager.UIAll.StatusMessage = ("$f70PAUSE$fff in 30 seconds");

}

if (Now + 10000 >= Start + BeforePause ) {
UIManager.UIAll.BigMessage = ("$f70PAUSE$fff in 10 seconds");
UIManager.UIAll.StatusMessage = "";
}

if (Now + 5000 >= Start + BeforePause) {
UIManager.UIAll.BigMessage = ("$f70PAUSE$fff in 5 seconds");
}
if (Now + 3000 >= Start + BeforePause) {
UIManager.UIAll.BigMessage = ("$f70PAUSE$fff in 3 seconds");
}

if (Now + 2000 >= Start + BeforePause) {
UIManager.UIAll.BigMessage = ("$f70PAUSE$fff in 2 seconds");
}

if (Now + 1000 >= Start  + BeforePause) {
UIManager.UIAll.BigMessage = ("$f70PAUSE$fff in 1 seconds");
}


if (Now >= Start + BeforePause - 1000 && DontRedo == False ) {
---Pause---
DontRedo = True;
Pause = False;
   }
}
***

***PlayLoop***
***
	foreach (Event in PendingEvents) {
		if (Event.Type == CSmModeEvent::EType::OnCommand) {
			switch (Event.CommandName) {
case "Command_ForcePauseTime": {
DoPause(0, Event.CommandValueInteger * 1000);
declare WinType = -1;
				}
				}
				}
				}
// Pause Things start
/* Pause */ if (Now >= ResetPause) {
/* Pause */ Fini = False;
/* Pause */ }
/* Pause */ // Call pause
/* Pause */ 
/* Pause */ ---PauseManagement---
// Pause Things end
if (!CE) {
foreach (Event, PendingEvents) {
	// ---------------------------------- //
	// On armor empty
	if (Event.Type == CSmModeEvent::EType::OnArmorEmpty) {
---OnArmorEmpty---
		XmlRpc::OnArmorEmpty(Event);
		
	} 
	// ---------------------------------- //
	// On hit
	else if (Event.Type == CSmModeEvent::EType::OnHit ) {
	if (Event.Shooter != Null && Event.Victim != Null)
---OnHit---

//UpdateHitrate(Event.Shooter);
			XmlRpc::OnHit(Event);
		
	
	}
	
		// ---------------------------------- //
	// On Miss
	else if (Event.Type == CSmModeEvent::EType::OnNearMiss ) {
	if (Event.Shooter != Null && Event.Victim != Null)
---OnMiss---

//UpdateHitrate(Event.Shooter);
			XmlRpc::OnHit(Event);
		
	
	} 
	
			// ---------------------------------- //
	// On Deny
	else if (Event.Type == CSmModeEvent::EType::OnShotDeny ) {
	if (Event.Shooter != Null && Event.Victim != Null)
---OnDeny---

//UpdateHitrate(Event.Shooter);
			XmlRpc::OnHit(Event);
		
	
	}
	
				// ---------------------------------- //
	// On Deny
	else if (Event.Type == CSmModeEvent::EType::OnFallDamage  ) {
	if (Event.Player != Null)
---OnFall---

//UpdateHitrate(Event.Shooter);
			XmlRpc::OnHit(Event);
		
	
	}
	
		else if (Event.Type == CSmModeEvent::EType::OnShoot ) {
---OnShoot---
//UpdateHitrate(Event.Shooter);
			XmlRpc::OnHit(Event);
		
	
	} 
	 
    // ---------------------------------- //
    // On Custom hit
    else if (Event.Type == CSmModeEvent::EType::OnActionCustomEvent) {
    if( Event.Shooter != Null && Event.Victim != Null)
    ---OnCHit---
    }
	
	else if (Event.Type == CSmModeEvent::EType::OnPlayerRemoved) {
	---OnPlayerDisconnect---
	}
	// ---------------------------------- //
	// On player request respawn
	else if (Event.Type == CSmModeEvent::EType::OnPlayerRequestRespawn) {
---RequestRespawn---
		XmlRpc::OnPlayerRequestRespawn(Event);
		
		
		
	} 
	// ---------------------------------- //
	// Others
	else {
		//PassOn(Event);
	}
}
}	
***



/* FONCTIONS /*

/*START*/ // PAUSE FUNCTION
/* _HowBefore = Seconds before Pause. ( in ms )*/
/* _PauseTime = Time of the pause. ( in ms)   */	
/**/		Void DoPause(Integer _HowBefore, Integer _PauseTime) {
/**/	    Start = Now;
/**/		BeforePause = _HowBefore;
/**/		CalledPause = _PauseTime;
/**/		Pause = True;
/**/    }
/* Only (); , Reset the pause */
/**/       Void ResetPause() {
/**/       Pause = False;
/**/       BeforePause = 0;
/**/       CalledPause = 0;
/**/       Start = 0;
/**/       ResetPause = Now + 10;
/**/    }
/*END*/ 

/*START*/ // HEADER FUNCTION
/* Only (); , Add a header */
/**/          Void Header (Text _Mode) {
/**/    	UIManager.UIAll.OverlayScoreSummary = True;
if (_Mode == "DeathP") {
/**/    	UIManager.UIAll.ScoreSummary_Points1 = GoalPoints1;
/**/    	UIManager.UIAll.ScoreSummary_RoundPoints1	= ClanScores[1];
/**/		UIManager.UIAll.ScoreSummary_RoundPoints2	= ClanScores[2];
/**/    	UIManager.UIAll.ScoreSummary_MatchPoints1	= GoalPoints1;
/**/		UIManager.UIAll.ScoreSummary_MatchPoints2	= GoalPoints2;
/**/     	UIManager.UIAll.ScoreSummary_Points2 = GoalPoints2;
/**/    	UIManager.UIAll.ScoreSummary_MatchPoints1 = -1;
/**/    	UIManager.UIAll.ScoreSummary_MatchPoints2 = -1;
} else if (_Mode == "") {
/**/    	UIManager.UIAll.ScoreSummary_Points1 = ClanScores[1];
/**/    	UIManager.UIAll.ScoreSummary_RoundPoints1	= ClanMatchPoints1;
/**/		UIManager.UIAll.ScoreSummary_RoundPoints2	= ClanMatchPoints2;
/**/    	UIManager.UIAll.ScoreSummary_MatchPoints1	= ClanMatchPoints1;
/**/		UIManager.UIAll.ScoreSummary_MatchPoints2	= ClanMatchPoints2;
/**/     	UIManager.UIAll.ScoreSummary_Points2 = ClanScores[2];
} else if (_Mode == "Kernel") {
/**/    	UIManager.UIAll.ScoreSummary_Points1 = ClanScores[1];
/**/    	UIManager.UIAll.ScoreSummary_RoundPoints1	= GoalPoints1;
/**/		UIManager.UIAll.ScoreSummary_RoundPoints2	= GoalPoints2;
/**/    	UIManager.UIAll.ScoreSummary_MatchPoints1	= ClanMatchPoints1;
/**/		UIManager.UIAll.ScoreSummary_MatchPoints2	= ClanMatchPoints2;
/**/     	UIManager.UIAll.ScoreSummary_Points2 = ClanScores[2];  	
/**/     	/**/     	
/**/    }
else if (_Mode == "Remove") UIManager.UIAll.OverlayScoreSummary = False;
}
/*END*/

 // SMALL UPDATE OF THE HEADER
//
 Void SmallHeaderUpdate() { /**/    	UIManager.UIAll.ScoreSummary_MatchPoints1	= GoalPoints1;
/**/		UIManager.UIAll.ScoreSummary_MatchPoints2	= GoalPoints2; }

/*START*/ // ROUNDS / TURNS
/* Only (); , Add a header */
/**/          Void UseRounds(Boolean _True) {
declare Boolean MB_UseSectionRound;
/**/ if (_True) {
/**/          UseRounds_B = True;
/**/    	
MB_UseSectionRound		= True;
/**/        ---InitStartServerRound---
/**/    } else UseRounds_B = False; MB_UseSectionRound		= False;  } 
/*END*/

/*START*/ // INIT GOALS
/* _A = Name of a Goal, B = Name of a Goal....... */
/**/          Void InitGoal(Text _A, Text _B, Text _C) {
/**/    	if (_A != "") {
/**/    	       foreach (Pole in MapLandmarks_Gauge) {
/**/    		    if (Pole.Tag == _A) Goals.add(Pole);
/**/           foreach (MapLandmark in MapLandmarks_Gauge) {
/**/ if (MapLandmark.Tag == _A) 
/* COLOR */ MapLandmark.Gauge.Clan = 1;
/**/ } 
/**/    	           }
/**/    	    }
/**/    	if (_B != "") {
/**/    	       foreach (Pole in MapLandmarks_Gauge) {
/**/    		    if (Pole.Tag == _B) Goals.add(Pole);
/**/    	       foreach (MapLandmark in MapLandmarks_Gauge) {
/**/ if (MapLandmark.Tag == _B) 
/* COLOR */ MapLandmark.Gauge.Clan = 2;
/**/ } 
/**/    	           }
/**/    	    }
/**/    	if (_C != "") {
/**/    	       foreach (Pole in MapLandmarks_Gauge) {
/**/    		    if (Pole.Tag == _C) Goals.add(Pole);
/**/    	           }
/**/    	    }
/**/    	}
/* - Clear -> */ Void ClearGoals() { Goals.clear(); }
/* - Init Values -> */ Void InitGoalValue(Integer _Value, Boolean _Max) { foreach (Goal in Goals) {  Goal.Gauge.Value = _Value; if (_Max) { Goal.Gauge.Max = _Value; } } }
/*END*/

// CUSTOMS VOID, NO EXPLAIN HERE
/* START */
Void InitGoalPoints(Integer _1, Integer _2) {
GoalPoints1 = _1;
GoalPoints2 = _2;

}
Void DoKo() {

}





Void ResetRequest() {
Request_B = False;
}

Void PoleRequest(Integer _Clan)
{

  if (Request_B == False) { 
if (_Clan == 0) {
// // // //
Message::SendBigMessage("Team "^Teams[0].ColorizedName^" just lost "^S_LoosePoints^" points!", 1500, 1, CUIConfig::EUISound::PhaseChange, 1);
// /* */
Request_B = True;
GoalPoints1 -= S_LoosePoints;
foreach (Goal in Goals) {
Goal.Gauge.Value = Goal.Gauge.Max;
ResetRequest();
}
   }
if (_Clan == 1) {
// // // //
Message::SendBigMessage("Team "^Teams[1].ColorizedName^" just lost "^S_LoosePoints^" points!", 1500, 1, CUIConfig::EUISound::PhaseChange, 1);
// /* */
Request_B = True;
GoalPoints2 -= S_LoosePoints;
foreach (Goal in Goals) {
Goal.Gauge.Value = Goal.Gauge.Max;
ResetRequest();
}
   }
 }
}

Void KOAddPoint(Integer _KOPoints, Integer _Clan) {
if (_Clan == 0) {
KOPoints = _KOPoints;
GoalPoints1 += KOPoints;
   }
if (_Clan == 1) {
KOPoints = _KOPoints;
GoalPoints2 += KOPoints;
   }
}

Void KORemovePoint(Integer _KOPoints, Integer _Clan) {
if (_Clan == 0) {
KOPoints = _KOPoints;
GoalPoints1 -= KOPoints;
   }
if (_Clan == 1) {
KOPoints = _KOPoints;
GoalPoints2 -= KOPoints;
   }
}

Void DoAccess(CSmPlayer _p) { }
Void DoAccess(Void _p) { }
Void DoAccess(Ident _p) { }

/* END */
/* -----> */ Void CheckBalance() { }
/*START*/ // CHECK END
/* if "" = use normal end, if "Custom" = Custom end */
/**/ Void CheckEnd(Text _Custom) {
/* This variable must be declared in gamemode ! */ if (CanEnd) {
/**/ if (_Custom == "") {
/**/ if (!UseRounds_B) {
/**/ 
/**/ } else ---CustomEndRound---
/**/ }
/**/ if (_Custom == "Custom") {
/**/ if (!UseRounds_B) {
/**/ ---CustomEndMap---
/**/ } else ---CustomEndRound---
/**/ }
/**/ 
/*REAL CODE*/


	
/**/ }
}

/*START*/ // GOAL LOOPS MANAGEMENT
/**/   Void GoalLoop(Text _Custom) {
/**/ declare Integer NbPlayersOnGoal;
/* GLOBAL FOREACH */ foreach (LandmarkGauge in MapLandmarks_Gauge) {
/*DECLARE SECTION*/ //////////////////////////////////////// START
foreach (PlayerId in LandmarkGauge.Sector.PlayersIds) {
declare NbPlayersOnGoal = LandmarkGauge.Sector.PlayersIds.count;
}
/* GLOBAL FOREACH END */ }
/*DECLARE SECTION*/ //////////////////////////////////////// END
/**/     foreach (Goal in Goals) {
/**/       if (_Custom == "") { /*//< Nothing for now */ }
/**/       if (_Custom == "Custom") { ---Goal--- }
/**/     } 
/**/   }
/*END*/  



Void SleepPresentation(Integer _Duration) {
   declare Start = Now;
   while(Now < Start + _Duration) {
      yield;
UIManager.UIAll.UISequence = CUIConfig::EUISequence::PlayersPresentation;
   }
UIManager.UIAll.UISequence = CUIConfig::EUISequence::Playing ;

}

Void UseCustomsEvents(Boolean Returned)
{
if (Returned) CE = True;
else CE = False;
}
