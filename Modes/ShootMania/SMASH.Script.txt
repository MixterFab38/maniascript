#Extends "Modes/ShootMania/ModeBase.Script.txt"

#Include "TextLib" as TextLib

#Include "Libs/Nadeo/ShootMania/SpawnScreen.Script.txt" as SpawnScreen
#Include "Libs/Nadeo/Interface.Script.txt" as Interface
#Include "Libs/Nadeo/ShootMania/Map.Script.txt" as Map
#Include "Libs/Nadeo/ShootMania/SM.Script.txt" as SM

#Setting S_EndTime 120 as _("End Time")


declare Ident[Integer] PlayId;

***StartServer***
***
// ---------------------------------- //
// Initialize UI
SpawnScreen::CreateScores("Score.RoundPoints");
SpawnScreen::CreateMapInfo();
Interface::CreateRank();

// ---------------------------------- //
// Create the scores table
ST2::SetStyle("LibST_SMBaseSolo");
ST2::SetStyle("LibST_SMBasePoints");
MB_SetScoresTableStyleFromXml(S_ScoresTableStylePath);
ST2::Build("SM");

MB_UseSectionRound = True;

PlayId = [1 => NullId, 2 => NullId, 3 => NullId, 4 => NullId];

Users_SetNbFakeUsers(1, 0);
***

***Events***
***
foreach (Event in PendingEvents) {
	if (Event.Type == CSmModeEvent::EType::OnHit) {
		if (Event.Player != Event.Victim) PassOn(Event);
		else Discard(Event);
	} else if (Event.Type == CSmModeEvent::EType::OnPlayerRequestRespawn) {
		Discard(Event);
	} else if (Event.Type == CSmModeEvent::EType::OnArmorEmpty) {
		Discard(Event);
	declare Player <=> Event.Victim;
	declare JustStarted = False;
	+++PlayerVar+++
	---AskSpawn---		
	}
}

foreach (Player in Players) {
	if (Player.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned) {
	declare JustStarted = False;
	+++PlayerVar+++
	---AskSpawn---
	}
}
***

***AskSpawn***
***
if (PlayerCanSpawn && JustStarted) {
	// Then spawn him ( first phase) 
	SmashSpawnPlayer(Player);
} else if (PlayerCanSpawn && !JustStarted) {
	InstSmashSpawnPlayer(Player, Now);
}
***

***PlayerVar***
***
declare Order for Player = 0;
declare PlayerCanSpawn for Player = False;
***

***ResetVar***
***
Order = 0;
PlayerCanSpawn = False;
***

***StartMap***
***
StartTime = Now;
F_EndTime(S_EndTime);

UIManager.UIAll.UISequence = CUIConfig::EUISequence::Playing;

foreach (Player in Players) {
+++PlayerVar+++
+++ResetVar+++
}
***

***StartRound***
***
declare CurrentOrder = 0;
declare I = 0;
declare PlayerName = [1 => "", 2 => "", 3 => "", 4 => ""];
while(True) {
foreach (Player in Players) {
yield;
+++PlayerVar+++
Order += 1;
		while (!PlayerCanSpawn && Order > CurrentOrder) {
		PlayerCanSpawn = True;
		PlayId[I+1] = Player.Id;
		PlayerName[I+1] = Player.Name;
		CurrentOrder = Order;
		Order -= 1;
		I += 1;
		break;
		} 
		
		if (!PlayerCanSpawn) { Order += 1; }
	}
	
   if (I >= Players.count) { break; }
}

declare BigMessage = TextLib::Compose("New Round");
declare StatusMessage = TextLib::Compose("%1$> vs %2$> vs %3$> vs %4$>",
							PlayerName[1], PlayerName[2], PlayerName[3], PlayerName[4]);

UIManager.UIAll.BigMessage = BigMessage;
UIManager.UIAll.StatusMessage = StatusMessage;

MB_Sleep(3000);

UIManager.UIAll.BigMessage = "";
UIManager.UIAll.StatusMessage = "";

declare JustStarted = True;

foreach (Player in Players) {
+++PlayerVar+++
---AskSpawn---
}

JustStarted = False;
***

***PlayLoop***
***
---Events---
***

Integer count(Boolean _Bool) {
declare I = 0;
	if (_Bool) I += 1;
return I;
}

/*
Boolean NeedOrder() {
declare I = 0;
declare CurrentOrder = 0;
	if (Players.count > 0) {
		foreach (Player in Players) {
		+++PlayerVar+++
			if (Order > CurrentOrder) {
			CurrentOrder = Order;
			I += 1;
			}
		}
	}
	if (I > 0 && CurrentOrder > 0) return True;
return False;
}
*/

Boolean NeedOrder() {
return True;
}

Void InstSmashSpawnPlayer(CSmPlayer Player, Integer _Time, Boolean _Inst) {
declare PlayerOrder for Player = -1;
for (PlayOrd, 1, Players.count) {
log(PlayOrd);
	if (Players.existskey(PlayId[PlayOrd])) {
		if (Player.Id == PlayId[PlayOrd]) PlayerOrder = PlayOrd;
	}
}
declare GoodLandmark <=> Map::GetPlayerSpawn("Spawn", PlayerOrder);
declare InstLandmark for Player = NullId;

foreach (MapLandmark in MapLandmarks) {
	if (MapLandmark.Tag == "Checkpoint" && MapLandmark.Order == PlayerOrder) InstLandmark = MapLandmark.Id;
}

	if (_Inst && InstLandmark != NullId) {
	Player.Armor = Player.ArmorMax;
	RespawnPlayer(Player, MapLandmarks_Gauge[InstLandmark]);
	} else SM::SpawnPlayer(Player, 0, GoodLandmark);
}

Void InstSmashSpawnPlayer(CSmPlayer Player, Integer _Time) {
	InstSmashSpawnPlayer(Player, _Time, True);
}

Void SmashSpawnPlayer(CSmPlayer Player) {
	if (Player != Null) {
	InstSmashSpawnPlayer(Player, Now, False);
	}
}

/*
 * Set an endtime
 */
Void F_EndTime(Integer _Time) {
	if (_Time > 0) {
		EndTime = Now + (_Time * 1000);
	} else EndTime = -1;
}
